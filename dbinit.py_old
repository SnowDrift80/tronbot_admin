# db_init.py

"""
dbinit.py

This module initializes the database for the admin app by creating necessary tables and stored procedures.
It should be executed as a standalone script after the database has been created and `config.py` has been updated
with the appropriate database credentials. This script must be run before starting `main.py`.

**Import Section**:
- Imports necessary libraries and modules for database operations and configuration management.

Imports:
    - psycopg2: A PostgreSQL database adapter for Python. Used for connecting to and interacting with the PostgreSQL database.
    - Config (from config): Custom configuration module that provides database credentials and other configuration settings.
    - generate_password_hash (from werkzeug.security): A utility for securely hashing passwords. Used for creating secure passwords for database users.
"""


import psycopg2
from config import Config
from werkzeug.security import generate_password_hash

class DBInit:
    """
    DBInit class initializes the database for the admin app.

    The DBInit class consists of several methods to set up the database structure,
    including creating tables, stored procedures, and functions. It is executed as 
    a standalone script after the database has been created and `config.py` has been 
    updated with the database credentials.

    Methods:
        __init__():
            Initializes the DBInit class by readying the Config data.
        
        connect():
            Establishes a connection to the PostgreSQL database using the configuration
            data from the Config class.
        
        execute_script(script):
            Executes a single SQL script provided as a parameter. This method is used to
            run the SQL commands for creating tables, functions, and procedures.
        
        initialize_database():
            Executes a series of methods to create the database structure. This method
            runs each SQL script in sequence to set up the required tables, stored 
            procedures, and functions.

        Other Methods:
            The class contains numerous additional methods, each responsible for 
            creating a specific table, stored procedure, or function in the database. 
            These methods are called by the `initialize_database` method to set up the 
            entire database structure.

            Example Methods:
                - create_users_table()
                - create_sessions_table()
                - create_withdrawal_requests_table()
                - create_approved_withdrawals_table()
                - create_declined_withdrawals_table()
                - create_create_withdrawal_request_procedure()
                - create_lock_record_procedure()
                - create_unlock_record_procedure()
                - create_admin_user()
                - create_withdrawal_to_approved_function()
                - create_withdrawal_to_declined_function()
                - create_get_withdrawal_data_function()
                - create_login_function()
                - create_logout_function()
                - create_get_user_by_username_function()
                - create_get_user_by_id_function()
                - create_create_user_function()
                - create_get_all_withdrawal_requests_function()
                - create_get_all_approved_withdrawals_function()
                - create_get_all_declined_withdrawals_function()
                - create_check_withdrawal_request_exists_function()
                - create_get_withdrawal_record_function()
                - create_rollback_withdrawal_procedure()
                - create_get_approved_withdrawal_record_function()
                - Additional methods as needed for database initialization.
    """
    
    def __init__(self):
        self.db_config = Config

    def connect(self):
        """Establish connection to PostgreSQL database."""
        return psycopg2.connect(
            dbname=self.db_config.DBCONFIG.DBNAME,
            user=self.db_config.DBCONFIG.USER,
            password=self.db_config.DBCONFIG.PASSWORD,
            host=self.db_config.DBCONFIG.HOST,
            port=self.db_config.DBCONFIG.PORT
        )

    def execute_script(self, script):
        """Execute a single SQL script."""
        with self.connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(script)
                conn.commit()

    def initialize_database(self):
        """Run all the SQL scripts to initialize the database."""
        self.execute_script(self.create_users_table())
        self.execute_script(self.create_sessions_table())
        self.execute_script(self.create_withdrawal_requests_table())  
        self.execute_script(self.create_approved_withdrawals_table())
        self.execute_script(self.create_declined_withdrawals_table())
        self.execute_script(self.create_create_withdrawal_request_procedure())
        self.execute_script(self.create_lock_record_procedure())
        self.execute_script(self.create_unlock_record_procedure())
        self.execute_script(self.create_admin_user())
        self.execute_script(self.create_withdrawal_to_approved_function())
        self.execute_script(self.create_withdrawal_to_declined_function())
        self.execute_script(self.create_get_withdrawal_data_function())
        self.execute_script(self.create_login_function())
        self.execute_script(self.create_logout_function())
        self.execute_script(self.create_get_user_by_username_function())
        self.execute_script(self.create_get_user_by_id_function())
        self.execute_script(self.create_create_user_fu

    def __init__(self):
        self.db_config = Config

    def connect(self):
        """Establish connection to PostgreSQL database."""
        return psycopg2.connect(
            dbname=self.db_config.DBCONFIG.DBNAME,
            user=self.db_config.DBCONFIG.USER,
            password=self.db_config.DBCONFIG.PASSWORD,
            host=self.db_config.DBCONFIG.HOST,
            port=self.db_config.DBCONFIG.PORT
        )

    def execute_script(self, script):
        """Execute a single SQL script."""
        with self.connect() as conn:
            with conn.cursor() as cursor:
                cursor.execute(script)
                conn.commit()

    def initialize_database(self):
        """Run all the SQL scripts to initialize the database."""
        self.execute_script(self.create_users_table())
        self.execute_script(self.create_sessions_table())
        self.execute_script(self.create_withdrawal_requests_table())  
        self.execute_script(self.create_approved_withdrawals_table())
        self.execute_script(self.create_declined_withdrawals_table())
        self.execute_script(self.create_create_withdrawal_request_procedure())
        self.execute_script(self.create_lock_record_procedure())
        self.execute_script(self.create_unlock_record_procedure())
        self.execute_script(self.create_admin_user())
        self.execute_script(self.create_withdrawal_to_approved_function())
        self.execute_script(self.create_withdrawal_to_declined_function())
        self.execute_script(self.create_get_withdrawal_data_function())

        self.execute_script(self.create_login_function())
        self.execute_script(self.create_logout_function())
        self.execute_script(self.create_get_user_by_username_function())
        self.execute_script(self.create_get_user_by_id_function())
        self.execute_script(self.create_create_user_function())
        self.execute_script(self.create_get_all_withdrawal_requests_function())
        self.execute_script(self.create_get_all_approved_withdrawals_function())
        self.execute_script(self.create_get_all_declined_withdrawals_function())
        self.execute_script(self.create_check_withdrawal_request_exists_function())
        self.execute_script(self.create_get_withdrawal_record_function())
        self.execute_script(self.create_rollback_withdrawal_procedure())
        self.execute_script(self.create_get_approved_withdrawal_record_function())
        # Add more functions here as needed

    @staticmethod
    def create_users_table():
        """Create users table."""
        return """
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(100) UNIQUE NOT NULL,
            password TEXT NOT NULL
        );
        """

    @staticmethod
    def create_sessions_table():
        """Create sessions table."""
        return """
        CREATE TABLE IF NOT EXISTS sessions (
            id SERIAL PRIMARY KEY,
            user_id INT NOT NULL,
            login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
        );
        """
    

    @staticmethod
    def create_withdrawal_requests_table():
        """Create withdrawal_requests table."""
        return """
        CREATE TABLE IF NOT EXISTS withdrawal_requests (
            wrid SERIAL PRIMARY KEY,
            chat_id VARCHAR(100) NOT NULL,
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10) DEFAULT 'USDT',
            amount NUMERIC(20, 6) NOT NULL,
            net_amount NUMERIC(20, 6) NOT NULL,
            fee_percent NUMERIC(5, 2) NOT NULL,
            fee_amount NUMERIC(20, 6) NOT NULL,
            wallet VARCHAR(100) NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status VARCHAR(20) DEFAULT 'Pending',
            locked_by INT -- reference to admin ID who holds the lock
        );
        """
    

    @staticmethod
    def create_approved_withdrawals_table():
        """Create approved_withdrawals table."""
        return """
        CREATE TABLE IF NOT EXISTS approved_withdrawals (
            wrid SERIAL PRIMARY KEY,
            chat_id VARCHAR(100) NOT NULL,
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10) DEFAULT 'USDT',
            amount NUMERIC(20, 6) NOT NULL,
            net_amount NUMERIC(20, 6) NOT NULL,
            fee_percent NUMERIC(5, 2) NOT NULL,
            fee_amount NUMERIC(20, 6) NOT NULL,
            wallet VARCHAR(100) NOT NULL,
            timestamp TIMESTAMP NOT NULL,
            approved_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status VARCHAR(20) DEFAULT 'Approved',
            approved_by INT -- reference to admin ID who approved the withdrawal
        );
        """
    

    @staticmethod
    def create_declined_withdrawals_table():
        """Create declined_withdrawals table."""
        return """
        CREATE TABLE IF NOT EXISTS declined_withdrawals (
            wrid SERIAL PRIMARY KEY,
            chat_id VARCHAR(100) NOT NULL,
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10) DEFAULT 'USDT',
            amount NUMERIC(20, 6) NOT NULL,
            net_amount NUMERIC(20, 6) NOT NULL,
            fee_percent NUMERIC(5, 2) NOT NULL,
            fee_amount NUMERIC(20, 6) NOT NULL,
            wallet VARCHAR(100) NOT NULL,
            timestamp TIMESTAMP NOT NULL,
            declined_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status VARCHAR(20) DEFAULT 'Declined',
            declined_by INT -- reference to admin ID who declined the withdrawal
        );
        """


    @staticmethod
    def create_lock_record_procedure():
        """Create the stored procedure that locks the record which is being worked on by an admin user """
        return """
        CREATE OR REPLACE PROCEDURE lock_record(
            in_wrid INT,
            in_admin_id INT
        )
        LANGUAGE SQL
        AS $$
        UPDATE withdrawal_requests
        SET locked_by = in_admin_id,
            status = 'LOCKED'
        WHERE wrid = in_wrid;
        $$;
        """
    

    @staticmethod
    def create_unlock_record_procedure():
        """ Create stored procedure that unlocks the record which was being worked on by an admin user """
        return """
        CREATE OR REPLACE PROCEDURE unlock_record(
            in_wrid INT
        )
        LANGUAGE SQL
        AS $$
        UPDATE withdrawal_requests
        SET locked_by = NULL,
            status = 'Pending'
        WHERE wrid = in_wrid;
        $$;
        """


    @staticmethod
    def create_create_withdrawal_request_procedure():
        """Create stored procedure for adding withdrawal requests to withdrawal_requests table"""
        return """
        CREATE OR REPLACE PROCEDURE create_withdrawal_request(
            p_chat_id VARCHAR(100),
            p_firstname VARCHAR(100),
            p_lastname VARCHAR(100),
            p_currency VARCHAR(10),
            p_amount NUMERIC(20, 6),
            p_fee_percent NUMERIC(5, 2),
            p_wallet VARCHAR(100)
        )
        LANGUAGE plpgsql
        AS $$
        DECLARE
            v_fee_amount NUMERIC(20, 6);
            v_net_amount NUMERIC(20, 6);
        BEGIN
            -- Calculate fee amount and net amount
            v_fee_amount := p_amount * p_fee_percent / 100.0;
            v_net_amount := p_amount - v_fee_amount;

            -- Insert into withdrawal_requests table
            INSERT INTO withdrawal_requests (chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet)
            VALUES (p_chat_id, p_firstname, p_lastname, p_currency, p_amount, v_net_amount, p_fee_percent, v_fee_amount, p_wallet);

            -- Optionally, return some result or confirmation
            -- RETURNING wrid, timestamp;  -- Example: return inserted ID and timestamp
        END;
        $$;
        """
    

    @staticmethod
    def create_withdrawal_to_approved_function():
        """Creates stored function that moves approved withdrawals to the approved table"""
        return """
        CREATE OR REPLACE FUNCTION withdrawal_to_approved(p_wrid INTEGER, admin_id INTEGER) RETURNS VOID AS $$
        BEGIN
            INSERT INTO approved_withdrawals (wrid, chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet, timestamp, status, approved_by)
            SELECT p_wrid, chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet, timestamp, 'Approved', admin_id
            FROM withdrawal_requests
            WHERE withdrawal_requests.wrid = p_wrid;
            
            DELETE FROM withdrawal_requests WHERE wrid = p_wrid;
        END;
        $$ LANGUAGE plpgsql;
        """
    

    @staticmethod
    def create_withdrawal_to_declined_function():
        """Creates stored function that moves declined withdrawals to the declined table"""
        return """
        CREATE OR REPLACE FUNCTION withdrawal_to_declined(p_wrid INT, admin_id INT) RETURNS VOID AS $$
        BEGIN
            INSERT INTO declined_withdrawals (wrid, chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet, timestamp, status, declined_by)
            SELECT p_wrid, chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet, timestamp, 'Declined', admin_id
            FROM withdrawal_requests
            WHERE withdrawal_requests.wrid = p_wrid;
            
            DELETE FROM withdrawal_requests WHERE wrid = p_wrid;
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_admin_user():
        """Create admin user if not exists."""
        admin_username = Config.DBCONFIG.ADMIN_USERNAME
        admin_password = generate_password_hash(Config.DBCONFIG.ADMIN_PASSWORD)
        return f"""
        INSERT INTO users (username, password)
        VALUES ('{admin_username}', '{admin_password}')
        ON CONFLICT DO NOTHING;
        """

    @staticmethod
    def create_login_function():
        """Create login function."""
        return """
        CREATE OR REPLACE FUNCTION login(username VARCHAR, password TEXT)
        RETURNS BOOLEAN AS $$
        BEGIN
            RETURN EXISTS (
                SELECT 1 FROM users
                WHERE username = username AND password = password
            );
        END;
        $$ LANGUAGE plpgsql;
        """

    @staticmethod
    def create_logout_function():
        """Create logout function."""
        return """
        CREATE OR REPLACE FUNCTION logout(user_id INT)
        RETURNS VOID AS $$
        BEGIN
            -- Perform logout operations if needed
            -- E.g., update last_logout_time in sessions table
            -- This function can be expanded based on your logout requirements
            -- For simplicity, it's left as a placeholder
            RETURN;
        END;
        $$ LANGUAGE plpgsql;
        """
    
    @staticmethod
    def create_get_user_by_username_function():
        """Create get_user_by_username function."""
        return """
        CREATE OR REPLACE FUNCTION get_user_by_username(p_username VARCHAR)
        RETURNS TABLE (id INT, username VARCHAR, password TEXT) AS $$
        BEGIN
            RETURN QUERY
            SELECT u.id, u.username, u.password
            FROM users u
            WHERE u.username = p_username;
        END;
        $$ LANGUAGE plpgsql;
        """    
    

    @staticmethod
    def create_get_user_by_id_function():
        """Create get_user_by_id function"""
        return """
        CREATE OR REPLACE FUNCTION get_user_by_id(p_user_id INT)
        RETURNS TABLE (user_id INT, user_name VARCHAR(100), password_hash TEXT) AS $$
        BEGIN
            RETURN QUERY
            SELECT id AS user_id, username AS user_name, password_hash
            FROM users
            WHERE id = p_user_id;
        END;
        $$ LANGUAGE plpgsql;
        """
    

    @staticmethod
    def create_create_user_function():
        """Create create_user function"""
        return """
        CREATE OR REPLACE FUNCTION create_user(p_username VARCHAR(100), p_password_hash TEXT)
        RETURNS VOID AS $$
        BEGIN
            INSERT INTO users (username, password)
            VALUES (p_username, p_password_hash);
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_get_all_withdrawal_requests_function():
        return """
        CREATE OR REPLACE FUNCTION get_all_withdrawal_requests()
        RETURNS TABLE (
            wrid INT,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            status VARCHAR(20),
            locked_by INT
        ) AS $$
        BEGIN
            RETURN QUERY
            SELECT 
                w.wrid, w.chat_id, w.firstname, w.lastname, w.currency, w.amount, w.net_amount, w.fee_percent, w.fee_amount, w.wallet, w."timestamp", w.status, w.locked_by
            FROM 
                withdrawal_requests w
            ORDER BY
                w."timestamp" ASC;  -- Order by timestamp ascending
        END;
        $$ LANGUAGE plpgsql;
        """
    

    @staticmethod
    def create_get_withdrawal_data_function():
        """returns withdrawal request record based on wrid and admin_id that will be used to confirm back to client"""
        return """
        CREATE OR REPLACE FUNCTION get_withdrawal_data(p_wrid INTEGER, p_admin_id INTEGER)
        RETURNS TABLE (
            wrid INTEGER,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            status VARCHAR(20),
            approved_by_username VARCHAR(100)
        )
        AS $$
        BEGIN
            RETURN QUERY
            SELECT
                wr.wrid,
                wr.chat_id,
                wr.firstname,
                wr.lastname,
                wr.currency,
                wr.amount,
                wr.net_amount,
                wr.fee_percent,
                wr.fee_amount,
                wr.wallet,
                wr."timestamp",
                wr.status,
                u.username AS approved_by_username
            FROM
                withdrawal_requests wr
            JOIN
                users u ON wr.locked_by = u.id  -- Assuming locked_by references admin ID in users table
            WHERE
                wr.wrid = p_wrid
                AND u.id = p_admin_id;
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_get_withdrawal_record_function():
        """returns withdrawal request record based on wrid only"""
        return """
        CREATE OR REPLACE FUNCTION get_withdrawal_record(p_wrid INTEGER)
        RETURNS TABLE (
            wrid INTEGER,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            status VARCHAR(20)
        )
        AS $$
        BEGIN
            RETURN QUERY
            SELECT
                wr.wrid,
                wr.chat_id,
                wr.firstname,
                wr.lastname,
                wr.currency,
                wr.amount,
                wr.net_amount,
                wr.fee_percent,
                wr.fee_amount,
                wr.wallet,
                wr."timestamp",
                wr.status
            FROM
                withdrawal_requests wr
            WHERE
                wr.wrid = p_wrid;
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_get_all_approved_withdrawals_function():
        """returns all approved withdrawals as recordset"""
        return """
        CREATE OR REPLACE FUNCTION get_all_approved_withdrawals()
        RETURNS TABLE (
            wrid INT,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            approved_timestamp TIMESTAMP,
            status VARCHAR(20),
            approved_by_username VARCHAR(100)
        ) AS $$
        BEGIN
            RETURN QUERY
            SELECT 
                a.wrid, a.chat_id, a.firstname, a.lastname, a.currency, a.amount, a.net_amount, a.fee_percent, a.fee_amount, a.wallet, a."timestamp", a.approved_timestamp, a.status, u.username AS approved_by_username
            FROM 
                approved_withdrawals a
            JOIN
                users u ON a.approved_by = u.id
            ORDER BY
                a.approved_timestamp DESC  -- Order by approved_timestamp ascending
            LIMIT 1000;  -- Limit the result set to 1000 rows
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_get_all_declined_withdrawals_function():
        """returns all declined withdrawals as recordset"""
        return """
        CREATE OR REPLACE FUNCTION get_all_declined_withdrawals()
        RETURNS TABLE (
            wrid INT,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            declined_timestamp TIMESTAMP, 
            status VARCHAR(20),
            declined_by_username VARCHAR(100)
        ) AS $$
        BEGIN
            RETURN QUERY
            SELECT 
                d.wrid, d.chat_id, d.firstname, d.lastname, d.currency, d.amount, d.net_amount, d.fee_percent, d.fee_amount, d.wallet, d."timestamp", d.declined_timestamp, d.status, u.username AS declined_by_username
            FROM 
                declined_withdrawals d
            JOIN
                users u ON d.declined_by = u.id
            ORDER BY
                d.declined_timestamp DESC  -- Order by declined_timestamp ascending
            LIMIT 1000;  -- Limit the result set to 1000 rows
        END;
        $$ LANGUAGE plpgsql;
        """


    @staticmethod
    def create_check_withdrawal_request_exists_function():
        """this stored function checks if there's already an active request with that chat_id in withdrawal_requests"""
        return """
        CREATE OR REPLACE FUNCTION check_withdrawal_request_exists(p_chat_id VARCHAR(100))
        RETURNS INTEGER  -- Assuming wrid is of type SERIAL (INTEGER)
        AS $$
        DECLARE
            v_wrid INTEGER;
        BEGIN
            SELECT wrid INTO v_wrid
            FROM withdrawal_requests
            WHERE chat_id = p_chat_id;

            RETURN v_wrid;
        END;
        $$ LANGUAGE plpgsql;
        """
    

    @staticmethod
    def create_rollback_withdrawal_procedure():
        """This stored procedure select an approved withdrawal record using wrid
           from the approved_withdrawals table and inserts it into the approval_requests table
           and finally deletes the original record in the approved_withdrawals table.
           This is executed by the rollback button in the approved withdrawals view."""
        return """
        CREATE OR REPLACE PROCEDURE rollback_withdrawal(IN wrid_param INT)
        LANGUAGE plpgsql
        AS $$
        BEGIN
            -- Insert the record into withdrawal_requests table
            INSERT INTO withdrawal_requests (chat_id, firstname, lastname, currency, amount, net_amount, fee_percent, fee_amount, wallet, "timestamp", status, locked_by)
            SELECT 
                chat_id, 
                firstname, 
                lastname, 
                currency, 
                amount, 
                net_amount, 
                fee_percent, 
                fee_amount, 
                wallet, 
                "timestamp", 
                'Pending', 
                NULL -- locked_by is set to NULL as it is a new request
            FROM approved_withdrawals 
            WHERE wrid = wrid_param;

            -- Delete the record from approved_withdrawals table
            DELETE FROM approved_withdrawals 
            WHERE wrid = wrid_param;
            
        END;
        $$;
        """


    @staticmethod
    def create_get_approved_withdrawal_record_function():
        """returns approved withdrawal record based on wrid only"""
        return """
        CREATE OR REPLACE FUNCTION get_approved_withdrawal_record(p_wrid INTEGER)
        RETURNS TABLE (
            wrid INTEGER,
            chat_id VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            currency VARCHAR(10),
            amount NUMERIC(20, 6),
            net_amount NUMERIC(20, 6),
            fee_percent NUMERIC(5, 2),
            fee_amount NUMERIC(20, 6),
            wallet VARCHAR(100),
            "timestamp" TIMESTAMP,
            approved_timestamp TIMESTAMP,
            status VARCHAR(20),
            approved_by INT
        )
        AS $$
        BEGIN
            RETURN QUERY
            SELECT
                aw.wrid,
                aw.chat_id,
                aw.firstname,
                aw.lastname,
                aw.currency,
                aw.amount,
                aw.net_amount,
                aw.fee_percent,
                aw.fee_amount,
                aw.wallet,
                aw."timestamp",
                aw.approved_timestamp,
                aw.status,
                aw.approved_by
            FROM
                approved_withdrawals aw
            WHERE
                aw.wrid = p_wrid;
        END;
        $$ LANGUAGE plpgsql;
        """


if __name__ == "__main__":
    db_initializer = DBInit()
    db_initializer.initialize_database()
